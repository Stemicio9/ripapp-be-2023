/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen;


import it.ripapp.ripapp.jooqgen.tables.Account;
import it.ripapp.ripapp.jooqgen.tables.AccountCity;
import it.ripapp.ripapp.jooqgen.tables.AccountInstanceid;
import it.ripapp.ripapp.jooqgen.tables.Admin;
import it.ripapp.ripapp.jooqgen.tables.Agency;
import it.ripapp.ripapp.jooqgen.tables.AgencyDemise;
import it.ripapp.ripapp.jooqgen.tables.AgencyOperator;
import it.ripapp.ripapp.jooqgen.tables.AgencyProduct;
import it.ripapp.ripapp.jooqgen.tables.Appversions;
import it.ripapp.ripapp.jooqgen.tables.City;
import it.ripapp.ripapp.jooqgen.tables.CounterSet;
import it.ripapp.ripapp.jooqgen.tables.Country;
import it.ripapp.ripapp.jooqgen.tables.Demise;
import it.ripapp.ripapp.jooqgen.tables.DemiseCity;
import it.ripapp.ripapp.jooqgen.tables.DemiseMatch;
import it.ripapp.ripapp.jooqgen.tables.DemiseRead;
import it.ripapp.ripapp.jooqgen.tables.DemiseRelative;
import it.ripapp.ripapp.jooqgen.tables.EndpointLogging;
import it.ripapp.ripapp.jooqgen.tables.KinshipText;
import it.ripapp.ripapp.jooqgen.tables.NotificationKinshipText;
import it.ripapp.ripapp.jooqgen.tables.NotificationText;
import it.ripapp.ripapp.jooqgen.tables.Phonebook;
import it.ripapp.ripapp.jooqgen.tables.Product;
import it.ripapp.ripapp.jooqgen.tables.Serverinfo;
import it.ripapp.ripapp.jooqgen.tables.Telegram;
import it.ripapp.ripapp.jooqgen.tables.records.AccountCityRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AccountInstanceidRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AccountRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AdminRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AgencyDemiseRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AgencyOperatorRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AgencyProductRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AgencyRecord;
import it.ripapp.ripapp.jooqgen.tables.records.AppversionsRecord;
import it.ripapp.ripapp.jooqgen.tables.records.CityRecord;
import it.ripapp.ripapp.jooqgen.tables.records.CounterSetRecord;
import it.ripapp.ripapp.jooqgen.tables.records.CountryRecord;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseCityRecord;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseMatchRecord;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseReadRecord;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseRecord;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseRelativeRecord;
import it.ripapp.ripapp.jooqgen.tables.records.EndpointLoggingRecord;
import it.ripapp.ripapp.jooqgen.tables.records.KinshipTextRecord;
import it.ripapp.ripapp.jooqgen.tables.records.NotificationKinshipTextRecord;
import it.ripapp.ripapp.jooqgen.tables.records.NotificationTextRecord;
import it.ripapp.ripapp.jooqgen.tables.records.PhonebookRecord;
import it.ripapp.ripapp.jooqgen.tables.records.ProductRecord;
import it.ripapp.ripapp.jooqgen.tables.records.ServerinfoRecord;
import it.ripapp.ripapp.jooqgen.tables.records.TelegramRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_EMAIL_KEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_email_key"), new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final UniqueKey<AccountCityRecord> ACCOUNT_CITY_PKEY = Internal.createUniqueKey(AccountCity.ACCOUNT_CITY, DSL.name("account_city_pkey"), new TableField[] { AccountCity.ACCOUNT_CITY.ACCOUNTID, AccountCity.ACCOUNT_CITY.CITYID }, true);
    public static final UniqueKey<AccountInstanceidRecord> ACCOUNT_INSTANCEID_PKEY = Internal.createUniqueKey(AccountInstanceid.ACCOUNT_INSTANCEID, DSL.name("account_instanceid_pkey"), new TableField[] { AccountInstanceid.ACCOUNT_INSTANCEID.ACCOUNTID, AccountInstanceid.ACCOUNT_INSTANCEID.INSTANCEID }, true);
    public static final UniqueKey<AdminRecord> ADMIN_PK = Internal.createUniqueKey(Admin.ADMIN, DSL.name("admin_pk"), new TableField[] { Admin.ADMIN.ADMINID }, true);
    public static final UniqueKey<AgencyRecord> AGENCY_PKEY = Internal.createUniqueKey(Agency.AGENCY, DSL.name("agency_pkey"), new TableField[] { Agency.AGENCY.AGENCYID }, true);
    public static final UniqueKey<AgencyDemiseRecord> AGENCY_DEMISE_PKEY = Internal.createUniqueKey(AgencyDemise.AGENCY_DEMISE, DSL.name("agency_demise_pkey"), new TableField[] { AgencyDemise.AGENCY_DEMISE.AGENCYID, AgencyDemise.AGENCY_DEMISE.DEMISEID }, true);
    public static final UniqueKey<AgencyOperatorRecord> AGENCY_OPERATOR_PKEY = Internal.createUniqueKey(AgencyOperator.AGENCY_OPERATOR, DSL.name("agency_operator_pkey"), new TableField[] { AgencyOperator.AGENCY_OPERATOR.AGENCYID, AgencyOperator.AGENCY_OPERATOR.ACCOUNTID }, true);
    public static final UniqueKey<AgencyProductRecord> AGENCY_PRODUCT_PK = Internal.createUniqueKey(AgencyProduct.AGENCY_PRODUCT, DSL.name("agency_product_pk"), new TableField[] { AgencyProduct.AGENCY_PRODUCT.PRODUCTID, AgencyProduct.AGENCY_PRODUCT.AGENCYID }, true);
    public static final UniqueKey<AppversionsRecord> APPVERSIONS_PKEY = Internal.createUniqueKey(Appversions.APPVERSIONS, DSL.name("appversions_pkey"), new TableField[] { Appversions.APPVERSIONS.VERSION }, true);
    public static final UniqueKey<CityRecord> CITY_PKEY = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), new TableField[] { City.CITY.CITYID }, true);
    public static final UniqueKey<CounterSetRecord> COUNTER_SET_PKEY = Internal.createUniqueKey(CounterSet.COUNTER_SET, DSL.name("counter_set_pkey"), new TableField[] { CounterSet.COUNTER_SET.ACCOUNTID }, true);
    public static final UniqueKey<CountryRecord> COUNTRY_PKEY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), new TableField[] { Country.COUNTRY.ID }, true);
    public static final UniqueKey<DemiseRecord> DEMISE_PKEY = Internal.createUniqueKey(Demise.DEMISE, DSL.name("demise_pkey"), new TableField[] { Demise.DEMISE.DEMISEID }, true);
    public static final UniqueKey<DemiseMatchRecord> DEMISE_MATCH_PKEY = Internal.createUniqueKey(DemiseMatch.DEMISE_MATCH, DSL.name("demise_match_pkey"), new TableField[] { DemiseMatch.DEMISE_MATCH.ACCOUNTID, DemiseMatch.DEMISE_MATCH.DEMISEID }, true);
    public static final UniqueKey<DemiseReadRecord> DEMISE_READ_PKEY = Internal.createUniqueKey(DemiseRead.DEMISE_READ, DSL.name("demise_read_pkey"), new TableField[] { DemiseRead.DEMISE_READ.DEMISEID, DemiseRead.DEMISE_READ.ACCOUNTID }, true);
    public static final UniqueKey<DemiseRelativeRecord> DEMISE_RELATIVE_DEMISEID_ACCOUNTID_KEY = Internal.createUniqueKey(DemiseRelative.DEMISE_RELATIVE, DSL.name("demise_relative_demiseid_accountid_key"), new TableField[] { DemiseRelative.DEMISE_RELATIVE.DEMISEID, DemiseRelative.DEMISE_RELATIVE.ACCOUNTID }, true);
    public static final UniqueKey<DemiseRelativeRecord> DEMISE_RELATIVE_DEMISEID_PHONE_KEY = Internal.createUniqueKey(DemiseRelative.DEMISE_RELATIVE, DSL.name("demise_relative_demiseid_phone_key"), new TableField[] { DemiseRelative.DEMISE_RELATIVE.DEMISEID, DemiseRelative.DEMISE_RELATIVE.PHONE }, true);
    public static final UniqueKey<DemiseRelativeRecord> DEMISE_RELATIVE_PKEY = Internal.createUniqueKey(DemiseRelative.DEMISE_RELATIVE, DSL.name("demise_relative_pkey"), new TableField[] { DemiseRelative.DEMISE_RELATIVE.RELATIVEID }, true);
    public static final UniqueKey<EndpointLoggingRecord> ENDPOINT_LOGGING_PKEY = Internal.createUniqueKey(EndpointLogging.ENDPOINT_LOGGING, DSL.name("endpoint_logging_pkey"), new TableField[] { EndpointLogging.ENDPOINT_LOGGING.ID }, true);
    public static final UniqueKey<KinshipTextRecord> KINSHIP_TEXT_PKEY = Internal.createUniqueKey(KinshipText.KINSHIP_TEXT, DSL.name("kinship_text_pkey"), new TableField[] { KinshipText.KINSHIP_TEXT.KINSHIP, KinshipText.KINSHIP_TEXT.LANG }, true);
    public static final UniqueKey<NotificationKinshipTextRecord> NOTIFICATION_KINSHIP_TEXT_PKEY = Internal.createUniqueKey(NotificationKinshipText.NOTIFICATION_KINSHIP_TEXT, DSL.name("notification_kinship_text_pkey"), new TableField[] { NotificationKinshipText.NOTIFICATION_KINSHIP_TEXT.KINSHIP, NotificationKinshipText.NOTIFICATION_KINSHIP_TEXT.LANG }, true);
    public static final UniqueKey<NotificationTextRecord> NOTIFICATION_TEXT_PKEY = Internal.createUniqueKey(NotificationText.NOTIFICATION_TEXT, DSL.name("notification_text_pkey"), new TableField[] { NotificationText.NOTIFICATION_TEXT.LANG }, true);
    public static final UniqueKey<PhonebookRecord> PHONEBOOK_PKEY = Internal.createUniqueKey(Phonebook.PHONEBOOK, DSL.name("phonebook_pkey"), new TableField[] { Phonebook.PHONEBOOK.ACCOUNTID, Phonebook.PHONEBOOK.IDX }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PK = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pk"), new TableField[] { Product.PRODUCT.PRODUCTID }, true);
    public static final UniqueKey<ServerinfoRecord> SERVERINFO_PKEY = Internal.createUniqueKey(Serverinfo.SERVERINFO, DSL.name("serverinfo_pkey"), new TableField[] { Serverinfo.SERVERINFO.STATUS }, true);
    public static final UniqueKey<TelegramRecord> TABLE_NAME_PK = Internal.createUniqueKey(Telegram.TELEGRAM, DSL.name("table_name_pk"), new TableField[] { Telegram.TELEGRAM.TELEGRAMID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountCityRecord, AccountRecord> ACCOUNT_CITY__ACCOUNT_CITY_ACCOUNTID_FKEY = Internal.createForeignKey(AccountCity.ACCOUNT_CITY, DSL.name("account_city_accountid_fkey"), new TableField[] { AccountCity.ACCOUNT_CITY.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<AccountCityRecord, CityRecord> ACCOUNT_CITY__ACCOUNT_CITY_CITYID_FKEY = Internal.createForeignKey(AccountCity.ACCOUNT_CITY, DSL.name("account_city_cityid_fkey"), new TableField[] { AccountCity.ACCOUNT_CITY.CITYID }, Keys.CITY_PKEY, new TableField[] { City.CITY.CITYID }, true);
    public static final ForeignKey<AccountInstanceidRecord, AccountRecord> ACCOUNT_INSTANCEID__ACCOUNT_INSTANCEID_ACCOUNTID_FKEY = Internal.createForeignKey(AccountInstanceid.ACCOUNT_INSTANCEID, DSL.name("account_instanceid_accountid_fkey"), new TableField[] { AccountInstanceid.ACCOUNT_INSTANCEID.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<AgencyDemiseRecord, AgencyRecord> AGENCY_DEMISE__AGENCY_DEMISE_AGENCYID_FKEY = Internal.createForeignKey(AgencyDemise.AGENCY_DEMISE, DSL.name("agency_demise_agencyid_fkey"), new TableField[] { AgencyDemise.AGENCY_DEMISE.AGENCYID }, Keys.AGENCY_PKEY, new TableField[] { Agency.AGENCY.AGENCYID }, true);
    public static final ForeignKey<AgencyDemiseRecord, DemiseRecord> AGENCY_DEMISE__AGENCY_DEMISE_DEMISEID_FKEY = Internal.createForeignKey(AgencyDemise.AGENCY_DEMISE, DSL.name("agency_demise_demiseid_fkey"), new TableField[] { AgencyDemise.AGENCY_DEMISE.DEMISEID }, Keys.DEMISE_PKEY, new TableField[] { Demise.DEMISE.DEMISEID }, true);
    public static final ForeignKey<AgencyOperatorRecord, AccountRecord> AGENCY_OPERATOR__AGENCY_OPERATOR_ACCOUNTID_FKEY = Internal.createForeignKey(AgencyOperator.AGENCY_OPERATOR, DSL.name("agency_operator_accountid_fkey"), new TableField[] { AgencyOperator.AGENCY_OPERATOR.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<AgencyOperatorRecord, AgencyRecord> AGENCY_OPERATOR__AGENCY_OPERATOR_AGENCYID_FKEY = Internal.createForeignKey(AgencyOperator.AGENCY_OPERATOR, DSL.name("agency_operator_agencyid_fkey"), new TableField[] { AgencyOperator.AGENCY_OPERATOR.AGENCYID }, Keys.AGENCY_PKEY, new TableField[] { Agency.AGENCY.AGENCYID }, true);
    public static final ForeignKey<AgencyProductRecord, AgencyRecord> AGENCY_PRODUCT__AGENCY_FK = Internal.createForeignKey(AgencyProduct.AGENCY_PRODUCT, DSL.name("agency_fk"), new TableField[] { AgencyProduct.AGENCY_PRODUCT.AGENCYID }, Keys.AGENCY_PKEY, new TableField[] { Agency.AGENCY.AGENCYID }, true);
    public static final ForeignKey<AgencyProductRecord, ProductRecord> AGENCY_PRODUCT__AGENCY_PRODUCT_PRODUCT_PRODUCTID_FK = Internal.createForeignKey(AgencyProduct.AGENCY_PRODUCT, DSL.name("agency_product_product_productId_fk"), new TableField[] { AgencyProduct.AGENCY_PRODUCT.PRODUCTID }, Keys.PRODUCT_PK, new TableField[] { Product.PRODUCT.PRODUCTID }, true);
    public static final ForeignKey<CounterSetRecord, AccountRecord> COUNTER_SET__COUNTER_SET_ACCOUNTID_FKEY = Internal.createForeignKey(CounterSet.COUNTER_SET, DSL.name("counter_set_accountid_fkey"), new TableField[] { CounterSet.COUNTER_SET.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<DemiseCityRecord, CityRecord> DEMISE_CITY__DEMISE_CITY_CITYID_FKEY = Internal.createForeignKey(DemiseCity.DEMISE_CITY, DSL.name("demise_city_cityid_fkey"), new TableField[] { DemiseCity.DEMISE_CITY.CITYID }, Keys.CITY_PKEY, new TableField[] { City.CITY.CITYID }, true);
    public static final ForeignKey<DemiseCityRecord, DemiseRecord> DEMISE_CITY__DEMISE_CITY_DEMISEID_FKEY = Internal.createForeignKey(DemiseCity.DEMISE_CITY, DSL.name("demise_city_demiseid_fkey"), new TableField[] { DemiseCity.DEMISE_CITY.DEMISEID }, Keys.DEMISE_PKEY, new TableField[] { Demise.DEMISE.DEMISEID }, true);
    public static final ForeignKey<DemiseMatchRecord, AccountRecord> DEMISE_MATCH__DEMISE_MATCH_ACCOUNTID_FKEY = Internal.createForeignKey(DemiseMatch.DEMISE_MATCH, DSL.name("demise_match_accountid_fkey"), new TableField[] { DemiseMatch.DEMISE_MATCH.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<DemiseMatchRecord, CityRecord> DEMISE_MATCH__DEMISE_MATCH_CITYID_FKEY = Internal.createForeignKey(DemiseMatch.DEMISE_MATCH, DSL.name("demise_match_cityid_fkey"), new TableField[] { DemiseMatch.DEMISE_MATCH.CITYID }, Keys.CITY_PKEY, new TableField[] { City.CITY.CITYID }, true);
    public static final ForeignKey<DemiseMatchRecord, DemiseRecord> DEMISE_MATCH__DEMISE_MATCH_DEMISEID_FKEY = Internal.createForeignKey(DemiseMatch.DEMISE_MATCH, DSL.name("demise_match_demiseid_fkey"), new TableField[] { DemiseMatch.DEMISE_MATCH.DEMISEID }, Keys.DEMISE_PKEY, new TableField[] { Demise.DEMISE.DEMISEID }, true);
    public static final ForeignKey<DemiseReadRecord, AccountRecord> DEMISE_READ__DEMISE_READ_ACCOUNTID_FKEY = Internal.createForeignKey(DemiseRead.DEMISE_READ, DSL.name("demise_read_accountid_fkey"), new TableField[] { DemiseRead.DEMISE_READ.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<DemiseReadRecord, DemiseRecord> DEMISE_READ__DEMISE_READ_DEMISEID_FKEY = Internal.createForeignKey(DemiseRead.DEMISE_READ, DSL.name("demise_read_demiseid_fkey"), new TableField[] { DemiseRead.DEMISE_READ.DEMISEID }, Keys.DEMISE_PKEY, new TableField[] { Demise.DEMISE.DEMISEID }, true);
    public static final ForeignKey<DemiseRelativeRecord, AccountRecord> DEMISE_RELATIVE__DEMISE_RELATIVE_ACCOUNTID_FKEY = Internal.createForeignKey(DemiseRelative.DEMISE_RELATIVE, DSL.name("demise_relative_accountid_fkey"), new TableField[] { DemiseRelative.DEMISE_RELATIVE.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<DemiseRelativeRecord, DemiseRecord> DEMISE_RELATIVE__DEMISE_RELATIVE_DEMISEID_FKEY = Internal.createForeignKey(DemiseRelative.DEMISE_RELATIVE, DSL.name("demise_relative_demiseid_fkey"), new TableField[] { DemiseRelative.DEMISE_RELATIVE.DEMISEID }, Keys.DEMISE_PKEY, new TableField[] { Demise.DEMISE.DEMISEID }, true);
    public static final ForeignKey<PhonebookRecord, AccountRecord> PHONEBOOK__PHONEBOOK_ACCOUNTID_FKEY = Internal.createForeignKey(Phonebook.PHONEBOOK, DSL.name("phonebook_accountid_fkey"), new TableField[] { Phonebook.PHONEBOOK.ACCOUNTID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<TelegramRecord, AccountRecord> TELEGRAM__TABLE_NAME_ACCOUNT_ACCOUNTID_FK = Internal.createForeignKey(Telegram.TELEGRAM, DSL.name("table_name_account_accountid_fk"), new TableField[] { Telegram.TELEGRAM.USERID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ACCOUNTID }, true);
    public static final ForeignKey<TelegramRecord, DemiseRecord> TELEGRAM__TABLE_NAME_DEMISE_DEMISEID_FK = Internal.createForeignKey(Telegram.TELEGRAM, DSL.name("table_name_demise_demiseid_fk"), new TableField[] { Telegram.TELEGRAM.DEMISEID }, Keys.DEMISE_PKEY, new TableField[] { Demise.DEMISE.DEMISEID }, true);
}
