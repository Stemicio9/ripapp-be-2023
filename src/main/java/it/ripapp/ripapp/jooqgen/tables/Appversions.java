/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.tables.records.AppversionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Appversions extends TableImpl<AppversionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.appversions</code>
     */
    public static final Appversions APPVERSIONS = new Appversions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppversionsRecord> getRecordType() {
        return AppversionsRecord.class;
    }

    /**
     * The column <code>public.appversions.version</code>.
     */
    public final TableField<AppversionsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Appversions(Name alias, Table<AppversionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Appversions(Name alias, Table<AppversionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.appversions</code> table reference
     */
    public Appversions(String alias) {
        this(DSL.name(alias), APPVERSIONS);
    }

    /**
     * Create an aliased <code>public.appversions</code> table reference
     */
    public Appversions(Name alias) {
        this(alias, APPVERSIONS);
    }

    /**
     * Create a <code>public.appversions</code> table reference
     */
    public Appversions() {
        this(DSL.name("appversions"), null);
    }

    public <O extends Record> Appversions(Table<O> child, ForeignKey<O, AppversionsRecord> key) {
        super(child, key, APPVERSIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AppversionsRecord> getPrimaryKey() {
        return Keys.APPVERSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<AppversionsRecord>> getKeys() {
        return Arrays.<UniqueKey<AppversionsRecord>>asList(Keys.APPVERSIONS_PKEY);
    }

    @Override
    public Appversions as(String alias) {
        return new Appversions(DSL.name(alias), this);
    }

    @Override
    public Appversions as(Name alias) {
        return new Appversions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Appversions rename(String name) {
        return new Appversions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appversions rename(Name name) {
        return new Appversions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
