/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.enums.Kinship;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseRelativeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemiseRelative extends TableImpl<DemiseRelativeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demise_relative</code>
     */
    public static final DemiseRelative DEMISE_RELATIVE = new DemiseRelative();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemiseRelativeRecord> getRecordType() {
        return DemiseRelativeRecord.class;
    }

    /**
     * The column <code>public.demise_relative.relativeid</code>.
     */
    public final TableField<DemiseRelativeRecord, UUID> RELATIVEID = createField(DSL.name("relativeid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.demise_relative.demiseid</code>.
     */
    public final TableField<DemiseRelativeRecord, UUID> DEMISEID = createField(DSL.name("demiseid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.demise_relative.accountid</code>.
     */
    public final TableField<DemiseRelativeRecord, UUID> ACCOUNTID = createField(DSL.name("accountid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.demise_relative.kinship</code>.
     */
    public final TableField<DemiseRelativeRecord, Kinship> KINSHIP = createField(DSL.name("kinship"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(it.ripapp.ripapp.jooqgen.enums.Kinship.class), this, "");

    /**
     * The column <code>public.demise_relative.phone</code>.
     */
    public final TableField<DemiseRelativeRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.demise_relative.phonehash</code>.
     */
    public final TableField<DemiseRelativeRecord, String> PHONEHASH = createField(DSL.name("phonehash"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.demise_relative.prefix</code>.
     */
    public final TableField<DemiseRelativeRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.VARCHAR, this, "");

    private DemiseRelative(Name alias, Table<DemiseRelativeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemiseRelative(Name alias, Table<DemiseRelativeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demise_relative</code> table reference
     */
    public DemiseRelative(String alias) {
        this(DSL.name(alias), DEMISE_RELATIVE);
    }

    /**
     * Create an aliased <code>public.demise_relative</code> table reference
     */
    public DemiseRelative(Name alias) {
        this(alias, DEMISE_RELATIVE);
    }

    /**
     * Create a <code>public.demise_relative</code> table reference
     */
    public DemiseRelative() {
        this(DSL.name("demise_relative"), null);
    }

    public <O extends Record> DemiseRelative(Table<O> child, ForeignKey<O, DemiseRelativeRecord> key) {
        super(child, key, DEMISE_RELATIVE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DemiseRelativeRecord> getPrimaryKey() {
        return Keys.DEMISE_RELATIVE_PKEY;
    }

    @Override
    public List<UniqueKey<DemiseRelativeRecord>> getKeys() {
        return Arrays.<UniqueKey<DemiseRelativeRecord>>asList(Keys.DEMISE_RELATIVE_PKEY, Keys.DEMISE_RELATIVE_DEMISEID_ACCOUNTID_KEY, Keys.DEMISE_RELATIVE_DEMISEID_PHONE_KEY);
    }

    @Override
    public List<ForeignKey<DemiseRelativeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DemiseRelativeRecord, ?>>asList(Keys.DEMISE_RELATIVE__DEMISE_RELATIVE_DEMISEID_FKEY, Keys.DEMISE_RELATIVE__DEMISE_RELATIVE_ACCOUNTID_FKEY);
    }

    private transient Demise _demise;
    private transient Account _account;

    public Demise demise() {
        if (_demise == null)
            _demise = new Demise(this, Keys.DEMISE_RELATIVE__DEMISE_RELATIVE_DEMISEID_FKEY);

        return _demise;
    }

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.DEMISE_RELATIVE__DEMISE_RELATIVE_ACCOUNTID_FKEY);

        return _account;
    }

    @Override
    public List<Check<DemiseRelativeRecord>> getChecks() {
        return Arrays.<Check<DemiseRelativeRecord>>asList(
              Internal.createCheck(this, DSL.name("demise_relative_check"), "((num_nonnulls(accountid, phone) = 1))", true)
        );
    }

    @Override
    public DemiseRelative as(String alias) {
        return new DemiseRelative(DSL.name(alias), this);
    }

    @Override
    public DemiseRelative as(Name alias) {
        return new DemiseRelative(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemiseRelative rename(String name) {
        return new DemiseRelative(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemiseRelative rename(Name name) {
        return new DemiseRelative(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, Kinship, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
