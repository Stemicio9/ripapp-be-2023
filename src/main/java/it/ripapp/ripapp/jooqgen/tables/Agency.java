/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.tables.records.AgencyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Agency extends TableImpl<AgencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.agency</code>
     */
    public static final Agency AGENCY = new Agency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgencyRecord> getRecordType() {
        return AgencyRecord.class;
    }

    /**
     * The column <code>public.agency.agencyid</code>.
     */
    public final TableField<AgencyRecord, UUID> AGENCYID = createField(DSL.name("agencyid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.agency.name</code>.
     */
    public final TableField<AgencyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.agency.address</code>.
     */
    public final TableField<AgencyRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.agency.email</code>.
     */
    public final TableField<AgencyRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.agency.agencylogo</code>.
     */
    public final TableField<AgencyRecord, String> AGENCYLOGO = createField(DSL.name("agencylogo"), SQLDataType.VARCHAR, this, "");

    private Agency(Name alias, Table<AgencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Agency(Name alias, Table<AgencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.agency</code> table reference
     */
    public Agency(String alias) {
        this(DSL.name(alias), AGENCY);
    }

    /**
     * Create an aliased <code>public.agency</code> table reference
     */
    public Agency(Name alias) {
        this(alias, AGENCY);
    }

    /**
     * Create a <code>public.agency</code> table reference
     */
    public Agency() {
        this(DSL.name("agency"), null);
    }

    public <O extends Record> Agency(Table<O> child, ForeignKey<O, AgencyRecord> key) {
        super(child, key, AGENCY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AgencyRecord> getPrimaryKey() {
        return Keys.AGENCY_PKEY;
    }

    @Override
    public List<UniqueKey<AgencyRecord>> getKeys() {
        return Arrays.<UniqueKey<AgencyRecord>>asList(Keys.AGENCY_PKEY);
    }

    @Override
    public Agency as(String alias) {
        return new Agency(DSL.name(alias), this);
    }

    @Override
    public Agency as(Name alias) {
        return new Agency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Agency rename(String name) {
        return new Agency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Agency rename(Name name) {
        return new Agency(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
