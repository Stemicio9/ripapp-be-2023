/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.enums.Kinship;
import it.ripapp.ripapp.jooqgen.enums.Lang;
import it.ripapp.ripapp.jooqgen.tables.records.KinshipTextRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KinshipText extends TableImpl<KinshipTextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kinship_text</code>
     */
    public static final KinshipText KINSHIP_TEXT = new KinshipText();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KinshipTextRecord> getRecordType() {
        return KinshipTextRecord.class;
    }

    /**
     * The column <code>public.kinship_text.kinship</code>.
     */
    public final TableField<KinshipTextRecord, Kinship> KINSHIP = createField(DSL.name("kinship"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(it.ripapp.ripapp.jooqgen.enums.Kinship.class), this, "");

    /**
     * The column <code>public.kinship_text.lang</code>.
     */
    public final TableField<KinshipTextRecord, Lang> LANG = createField(DSL.name("lang"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(it.ripapp.ripapp.jooqgen.enums.Lang.class), this, "");

    /**
     * The column <code>public.kinship_text.text</code>.
     */
    public final TableField<KinshipTextRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR.nullable(false), this, "");

    private KinshipText(Name alias, Table<KinshipTextRecord> aliased) {
        this(alias, aliased, null);
    }

    private KinshipText(Name alias, Table<KinshipTextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kinship_text</code> table reference
     */
    public KinshipText(String alias) {
        this(DSL.name(alias), KINSHIP_TEXT);
    }

    /**
     * Create an aliased <code>public.kinship_text</code> table reference
     */
    public KinshipText(Name alias) {
        this(alias, KINSHIP_TEXT);
    }

    /**
     * Create a <code>public.kinship_text</code> table reference
     */
    public KinshipText() {
        this(DSL.name("kinship_text"), null);
    }

    public <O extends Record> KinshipText(Table<O> child, ForeignKey<O, KinshipTextRecord> key) {
        super(child, key, KINSHIP_TEXT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<KinshipTextRecord> getPrimaryKey() {
        return Keys.KINSHIP_TEXT_PKEY;
    }

    @Override
    public List<UniqueKey<KinshipTextRecord>> getKeys() {
        return Arrays.<UniqueKey<KinshipTextRecord>>asList(Keys.KINSHIP_TEXT_PKEY);
    }

    @Override
    public KinshipText as(String alias) {
        return new KinshipText(DSL.name(alias), this);
    }

    @Override
    public KinshipText as(Name alias) {
        return new KinshipText(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KinshipText rename(String name) {
        return new KinshipText(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KinshipText rename(Name name) {
        return new KinshipText(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Kinship, Lang, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
