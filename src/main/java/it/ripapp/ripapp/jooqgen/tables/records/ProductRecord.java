/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables.records;


import it.ripapp.ripapp.jooqgen.tables.Product;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductRecord extends UpdatableRecordImpl<ProductRecord> implements Record4<UUID, String, Double, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.product.productId</code>.
     */
    public void setProductid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.product.productId</code>.
     */
    public UUID getProductid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.product.productName</code>.
     */
    public void setProductname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.product.productName</code>.
     */
    public String getProductname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.product.price</code>.
     */
    public void setPrice(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.product.price</code>.
     */
    public Double getPrice() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>public.product.urlImage</code>.
     */
    public void setUrlimage(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.product.urlImage</code>.
     */
    public String getUrlimage() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, Double, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, Double, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Product.PRODUCT.PRODUCTID;
    }

    @Override
    public Field<String> field2() {
        return Product.PRODUCT.PRODUCTNAME;
    }

    @Override
    public Field<Double> field3() {
        return Product.PRODUCT.PRICE;
    }

    @Override
    public Field<String> field4() {
        return Product.PRODUCT.URLIMAGE;
    }

    @Override
    public UUID component1() {
        return getProductid();
    }

    @Override
    public String component2() {
        return getProductname();
    }

    @Override
    public Double component3() {
        return getPrice();
    }

    @Override
    public String component4() {
        return getUrlimage();
    }

    @Override
    public UUID value1() {
        return getProductid();
    }

    @Override
    public String value2() {
        return getProductname();
    }

    @Override
    public Double value3() {
        return getPrice();
    }

    @Override
    public String value4() {
        return getUrlimage();
    }

    @Override
    public ProductRecord value1(UUID value) {
        setProductid(value);
        return this;
    }

    @Override
    public ProductRecord value2(String value) {
        setProductname(value);
        return this;
    }

    @Override
    public ProductRecord value3(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public ProductRecord value4(String value) {
        setUrlimage(value);
        return this;
    }

    @Override
    public ProductRecord values(UUID value1, String value2, Double value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductRecord
     */
    public ProductRecord() {
        super(Product.PRODUCT);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(UUID productid, String productname, Double price, String urlimage) {
        super(Product.PRODUCT);

        setProductid(productid);
        setProductname(productname);
        setPrice(price);
        setUrlimage(urlimage);
    }
}
