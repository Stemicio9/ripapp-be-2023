/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.enums.Demisematchtype;
import it.ripapp.ripapp.jooqgen.enums.Kinship;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseMatchRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemiseMatch extends TableImpl<DemiseMatchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demise_match</code>
     */
    public static final DemiseMatch DEMISE_MATCH = new DemiseMatch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemiseMatchRecord> getRecordType() {
        return DemiseMatchRecord.class;
    }

    /**
     * The column <code>public.demise_match.accountid</code>.
     */
    public final TableField<DemiseMatchRecord, UUID> ACCOUNTID = createField(DSL.name("accountid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.demise_match.demiseid</code>.
     */
    public final TableField<DemiseMatchRecord, UUID> DEMISEID = createField(DSL.name("demiseid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.demise_match.type</code>.
     */
    public final TableField<DemiseMatchRecord, Demisematchtype> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Demisematchtype.class), this, "");

    /**
     * The column <code>public.demise_match.name</code>.
     */
    public final TableField<DemiseMatchRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.demise_match.kinship</code>.
     */
    public final TableField<DemiseMatchRecord, Kinship> KINSHIP = createField(DSL.name("kinship"), SQLDataType.VARCHAR.asEnumDataType(Kinship.class), this, "");

    /**
     * The column <code>public.demise_match.cityid</code>.
     */
    public final TableField<DemiseMatchRecord, UUID> CITYID = createField(DSL.name("cityid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.demise_match.notify</code>.
     */
    public final TableField<DemiseMatchRecord, Boolean> NOTIFY = createField(DSL.name("notify"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.demise_match.ts</code>.
     */
    public final TableField<DemiseMatchRecord, LocalDateTime> TS = createField(DSL.name("ts"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private DemiseMatch(Name alias, Table<DemiseMatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemiseMatch(Name alias, Table<DemiseMatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demise_match</code> table reference
     */
    public DemiseMatch(String alias) {
        this(DSL.name(alias), DEMISE_MATCH);
    }

    /**
     * Create an aliased <code>public.demise_match</code> table reference
     */
    public DemiseMatch(Name alias) {
        this(alias, DEMISE_MATCH);
    }

    /**
     * Create a <code>public.demise_match</code> table reference
     */
    public DemiseMatch() {
        this(DSL.name("demise_match"), null);
    }

    public <O extends Record> DemiseMatch(Table<O> child, ForeignKey<O, DemiseMatchRecord> key) {
        super(child, key, DEMISE_MATCH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DemiseMatchRecord> getPrimaryKey() {
        return Keys.DEMISE_MATCH_PKEY;
    }

    @Override
    public List<UniqueKey<DemiseMatchRecord>> getKeys() {
        return Arrays.<UniqueKey<DemiseMatchRecord>>asList(Keys.DEMISE_MATCH_PKEY);
    }

    @Override
    public List<ForeignKey<DemiseMatchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DemiseMatchRecord, ?>>asList(Keys.DEMISE_MATCH__DEMISE_MATCH_ACCOUNTID_FKEY, Keys.DEMISE_MATCH__DEMISE_MATCH_DEMISEID_FKEY, Keys.DEMISE_MATCH__DEMISE_MATCH_CITYID_FKEY);
    }

    private transient Account _account;
    private transient Demise _demise;
    private transient City _city;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.DEMISE_MATCH__DEMISE_MATCH_ACCOUNTID_FKEY);

        return _account;
    }

    public Demise demise() {
        if (_demise == null)
            _demise = new Demise(this, Keys.DEMISE_MATCH__DEMISE_MATCH_DEMISEID_FKEY);

        return _demise;
    }

    public City city() {
        if (_city == null)
            _city = new City(this, Keys.DEMISE_MATCH__DEMISE_MATCH_CITYID_FKEY);

        return _city;
    }

    @Override
    public DemiseMatch as(String alias) {
        return new DemiseMatch(DSL.name(alias), this);
    }

    @Override
    public DemiseMatch as(Name alias) {
        return new DemiseMatch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemiseMatch rename(String name) {
        return new DemiseMatch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemiseMatch rename(Name name) {
        return new DemiseMatch(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, Demisematchtype, String, Kinship, UUID, Boolean, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
