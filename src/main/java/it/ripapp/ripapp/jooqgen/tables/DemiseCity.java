/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.tables.records.DemiseCityRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DemiseCity extends TableImpl<DemiseCityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.demise_city</code>
     */
    public static final DemiseCity DEMISE_CITY = new DemiseCity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DemiseCityRecord> getRecordType() {
        return DemiseCityRecord.class;
    }

    /**
     * The column <code>public.demise_city.demiseid</code>.
     */
    public final TableField<DemiseCityRecord, UUID> DEMISEID = createField(DSL.name("demiseid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.demise_city.cityid</code>.
     */
    public final TableField<DemiseCityRecord, UUID> CITYID = createField(DSL.name("cityid"), SQLDataType.UUID.nullable(false), this, "");

    private DemiseCity(Name alias, Table<DemiseCityRecord> aliased) {
        this(alias, aliased, null);
    }

    private DemiseCity(Name alias, Table<DemiseCityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.demise_city</code> table reference
     */
    public DemiseCity(String alias) {
        this(DSL.name(alias), DEMISE_CITY);
    }

    /**
     * Create an aliased <code>public.demise_city</code> table reference
     */
    public DemiseCity(Name alias) {
        this(alias, DEMISE_CITY);
    }

    /**
     * Create a <code>public.demise_city</code> table reference
     */
    public DemiseCity() {
        this(DSL.name("demise_city"), null);
    }

    public <O extends Record> DemiseCity(Table<O> child, ForeignKey<O, DemiseCityRecord> key) {
        super(child, key, DEMISE_CITY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<DemiseCityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DemiseCityRecord, ?>>asList(Keys.DEMISE_CITY__DEMISE_CITY_DEMISEID_FKEY, Keys.DEMISE_CITY__DEMISE_CITY_CITYID_FKEY);
    }

    private transient Demise _demise;
    private transient City _city;

    public Demise demise() {
        if (_demise == null)
            _demise = new Demise(this, Keys.DEMISE_CITY__DEMISE_CITY_DEMISEID_FKEY);

        return _demise;
    }

    public City city() {
        if (_city == null)
            _city = new City(this, Keys.DEMISE_CITY__DEMISE_CITY_CITYID_FKEY);

        return _city;
    }

    @Override
    public DemiseCity as(String alias) {
        return new DemiseCity(DSL.name(alias), this);
    }

    @Override
    public DemiseCity as(Name alias) {
        return new DemiseCity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DemiseCity rename(String name) {
        return new DemiseCity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DemiseCity rename(Name name) {
        return new DemiseCity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
