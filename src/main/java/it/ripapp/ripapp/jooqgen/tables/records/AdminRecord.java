/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables.records;


import it.ripapp.ripapp.jooqgen.tables.Admin;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminRecord extends UpdatableRecordImpl<AdminRecord> implements Record3<UUID, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.admin.adminid</code>.
     */
    public void setAdminid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.admin.adminid</code>.
     */
    public UUID getAdminid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.admin.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.admin.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.admin.email</code>.
     */
    public void setEmail(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.admin.email</code>.
     */
    public String getEmail() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Admin.ADMIN.ADMINID;
    }

    @Override
    public Field<String> field2() {
        return Admin.ADMIN.NAME;
    }

    @Override
    public Field<String> field3() {
        return Admin.ADMIN.EMAIL;
    }

    @Override
    public UUID component1() {
        return getAdminid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getEmail();
    }

    @Override
    public UUID value1() {
        return getAdminid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getEmail();
    }

    @Override
    public AdminRecord value1(UUID value) {
        setAdminid(value);
        return this;
    }

    @Override
    public AdminRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AdminRecord value3(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public AdminRecord values(UUID value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AdminRecord
     */
    public AdminRecord() {
        super(Admin.ADMIN);
    }

    /**
     * Create a detached, initialised AdminRecord
     */
    public AdminRecord(UUID adminid, String name, String email) {
        super(Admin.ADMIN);

        setAdminid(adminid);
        setName(name);
        setEmail(email);
    }
}
