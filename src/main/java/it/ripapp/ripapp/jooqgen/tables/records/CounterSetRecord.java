/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CounterSetRecord extends UpdatableRecordImpl<CounterSetRecord> implements Record2<UUID, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.counter_set.accountid</code>.
     */
    public void setAccountid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.counter_set.accountid</code>.
     */
    public UUID getAccountid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.counter_set.unread</code>.
     */
    public void setUnread(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.counter_set.unread</code>.
     */
    public Integer getUnread() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return CounterSet.COUNTER_SET.ACCOUNTID;
    }

    @Override
    public Field<Integer> field2() {
        return CounterSet.COUNTER_SET.UNREAD;
    }

    @Override
    public UUID component1() {
        return getAccountid();
    }

    @Override
    public Integer component2() {
        return getUnread();
    }

    @Override
    public UUID value1() {
        return getAccountid();
    }

    @Override
    public Integer value2() {
        return getUnread();
    }

    @Override
    public CounterSetRecord value1(UUID value) {
        setAccountid(value);
        return this;
    }

    @Override
    public CounterSetRecord value2(Integer value) {
        setUnread(value);
        return this;
    }

    @Override
    public CounterSetRecord values(UUID value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CounterSetRecord
     */
    public CounterSetRecord() {
        super(CounterSet.COUNTER_SET);
    }

    /**
     * Create a detached, initialised CounterSetRecord
     */
    public CounterSetRecord(UUID accountid, Integer unread) {
        super(CounterSet.COUNTER_SET);

        setAccountid(accountid);
        setUnread(unread);
    }
}
