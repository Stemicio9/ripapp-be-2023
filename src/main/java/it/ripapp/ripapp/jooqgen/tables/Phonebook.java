/*
 * This file is generated by jOOQ.
 */
package it.ripapp.ripapp.jooqgen.tables;


import it.ripapp.ripapp.jooqgen.Keys;
import it.ripapp.ripapp.jooqgen.Public;
import it.ripapp.ripapp.jooqgen.tables.records.PhonebookRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phonebook extends TableImpl<PhonebookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.phonebook</code>
     */
    public static final Phonebook PHONEBOOK = new Phonebook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhonebookRecord> getRecordType() {
        return PhonebookRecord.class;
    }

    /**
     * The column <code>public.phonebook.accountid</code>.
     */
    public final TableField<PhonebookRecord, UUID> ACCOUNTID = createField(DSL.name("accountid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.phonebook.phonehash</code>.
     */
    public final TableField<PhonebookRecord, String> PHONEHASH = createField(DSL.name("phonehash"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.phonebook.name</code>.
     */
    public final TableField<PhonebookRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.phonebook.idx</code>.
     */
    public final TableField<PhonebookRecord, Integer> IDX = createField(DSL.name("idx"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.phonebook.phone</code>.
     */
    public final TableField<PhonebookRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.phonebook.prefix</code>.
     */
    public final TableField<PhonebookRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.VARCHAR, this, "");

    private Phonebook(Name alias, Table<PhonebookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phonebook(Name alias, Table<PhonebookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.phonebook</code> table reference
     */
    public Phonebook(String alias) {
        this(DSL.name(alias), PHONEBOOK);
    }

    /**
     * Create an aliased <code>public.phonebook</code> table reference
     */
    public Phonebook(Name alias) {
        this(alias, PHONEBOOK);
    }

    /**
     * Create a <code>public.phonebook</code> table reference
     */
    public Phonebook() {
        this(DSL.name("phonebook"), null);
    }

    public <O extends Record> Phonebook(Table<O> child, ForeignKey<O, PhonebookRecord> key) {
        super(child, key, PHONEBOOK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PhonebookRecord> getPrimaryKey() {
        return Keys.PHONEBOOK_PKEY;
    }

    @Override
    public List<UniqueKey<PhonebookRecord>> getKeys() {
        return Arrays.<UniqueKey<PhonebookRecord>>asList(Keys.PHONEBOOK_PKEY);
    }

    @Override
    public List<ForeignKey<PhonebookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PhonebookRecord, ?>>asList(Keys.PHONEBOOK__PHONEBOOK_ACCOUNTID_FKEY);
    }

    private transient Account _account;

    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.PHONEBOOK__PHONEBOOK_ACCOUNTID_FKEY);

        return _account;
    }

    @Override
    public List<Check<PhonebookRecord>> getChecks() {
        return Arrays.<Check<PhonebookRecord>>asList(
              Internal.createCheck(this, DSL.name("phonebook_idx_check"), "((idx >= 0))", true)
        );
    }

    @Override
    public Phonebook as(String alias) {
        return new Phonebook(DSL.name(alias), this);
    }

    @Override
    public Phonebook as(Name alias) {
        return new Phonebook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phonebook rename(String name) {
        return new Phonebook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phonebook rename(Name name) {
        return new Phonebook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, Integer, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
